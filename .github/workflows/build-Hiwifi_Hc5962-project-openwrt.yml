#=================================================
# https://github.com/danxiaonuo/AutoBuild-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: danxiaonuo
# Blog: https://www.danxiaonuo.com
#=================================================

# 编译的名称
name: 编译Hiwifi_Hc5962 Project's的OpenWrt固件

on: 
  # 发布类型为published
  release:
    types: [published]
  # 上传为master版本
  push:
    branches: 
      - master
    # 路径
    paths:
      - 'config/Hiwifi_Hc5962-openwrt.config'
  # 每周三的晚上3点钟编译
  schedule:
     - cron: '0 3 * * 3'
  # 点击★开始触发编译固件
  watch:  
     types: started
  
# 环境变量
env:
   # 源码仓库地址
   REPO_URL: https://github.com/project-openwrt/openwrt
   # 源码分支
   REPO_BRANCH: master
   # 自定义feeds.conf.default文件名
   #FEEDS_CONF: feeds.conf.default
   # 自定义.config文件名
   CONFIG_FILE: config/Hiwifi_Hc5962-openwrt.config
   # 自定义执行脚本名称
   DIY_P1_SH: scripts/common-extra-openwrt.sh
   DIY_P2_SH: scripts/project-plugin-openwrt.sh
   # 时区设置
   TZ: Asia/Shanghai
   # 固件标签
   TARGET: ramips
   # 固件版本
   SUBTARGET: mt7621
   # 固件名称
   DEVICE: openwrt-ramips-mt7621-hiwifi_hc5962
   # SSH 连接Actions功能
   SSH_ACTIONS: false
   # 上传ROOTFS文件
   UPLOAD_ROOTFS: true
   # 临时文件名称
   DOWNLOAD_URL_FILE: Tmp-Link-Url.txt
   # 上传临时文件
   UPLOAD_TMP_LINK: true
 
# 任务集
jobs:
  build:
    # 选择虚拟环境
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    
    # 运行步骤
    steps:
    
    # 获取构建时间
    - name: 获取构建时间
      id: date
      run: echo "::set-output name=date::$(date +'%Y%m%d%H%M%S')"
    
    # 检出master分支
    - name: 检出master分支
      uses: actions/checkout@master
    
    # 初始化系统环境
    - name: 初始化系统环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        sudo swapoff /swapfile
        sudo rm -rf /swapfile /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler python3.5 git-core antlr3 gperf
        sudo apt-get -y full-upgrade 
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint ccache curl wget vim nano python python3 python-pip python3-pip python-ply python3-ply haveged lrzsz device-tree-compiler scons antlr3 gperf ecj fastjar mkisofs
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        curl -fsSL https://raw.githubusercontent.com/danxiaonuo/AutoBuild-OpenWrt/master/server/etc/.bashrc > ~/.bashrc
    
    # 克隆源码
    - name: 克隆源码
      run: git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
      
    # 加载自定义脚本  
    - name: 加载自定义脚本
      run: |
        chmod +x $DIY_P1_SH $DIY_P2_SH
        cd openwrt
        ../$DIY_P1_SH
        ../$DIY_P2_SH
     
    # 更新和安装 feeds 
    - name: 更新和安装 feeds
      run: |
        cd openwrt
        sed -i 's/^#\(src-git .*\)$/\1/' ./feeds.conf.default  
        ./scripts/feeds update -a
        ./scripts/feeds install -a
    
    # 加载自定义配置文件
    - name: 加载自定义配置文件
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
    
    # 生成配置文件
    - name: 生成配置文件
      run: | 
        cd openwrt && make defconfig
    
    # 连接SSH
    - name: 连接SSH
      uses: P3TERX/debugger-action@master
      if: env.SSH_ACTIONS == 'true'
    
    # 下载固件包
    - name: 下载固件包
      id: package
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    
    # 编译固件
    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "::set-output name=status::success"
      
    # 组织包文件  
    - name: 组织包文件
      if: steps.compile.outputs.status == 'success'
      run: |
        cd openwrt/bin
        mkdir -p targets/$TARGET/$SUBTARGET/pre-snapshots/snapshots
        mkdir -p targets/$TARGET/$SUBTARGET/pre-snapshots/snapshots/targets/$TARGET/$SUBTARGET
        cp -r packages targets/$TARGET/$SUBTARGET/pre-snapshots/snapshots
        cp -r targets/$TARGET/$SUBTARGET/packages targets/$TARGET/$SUBTARGET/pre-snapshots/snapshots/targets/$TARGET/$SUBTARGET
        zip -q -r targets/$TARGET/$SUBTARGET/packages.zip targets/$TARGET/$SUBTARGET/pre-snapshots/snapshots
        mkdir -p targets/$TARGET/$SUBTARGET/pre-packages-server
        cp -r ../../server targets/$TARGET/$SUBTARGET/pre-packages-server
        cd targets/$TARGET/$SUBTARGET
        cp -r pre-snapshots/snapshots pre-packages-server/server/web
        zip -q -r packages-server.zip pre-packages-server/server
      
    # 生成Sha256sum文件
    - name: 生成Sha256sum文件
      if: steps.compile.outputs.status == 'success'
      run: |
        cd openwrt/bin/targets/$TARGET/$SUBTARGET
        mv sha256sums sha256sums.orig
        sha256sum *.bin > sha256sums
        
    # 上传Config配置文件
    - name: 上传Config配置文件
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success'
      with:
        name: ${{ steps.date.outputs.date }}_${{ env.DEVICE }}.config.seed
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/config.seed
    
    # 上传Packages文件夹
    - name: 上传Packages文件夹
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success'
      with:
        name: packages
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/pre-snapshots
    
    # 上传Packages-Server
    - name: 上传Packages-Server
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success'
      with:
        name: packages-server
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/pre-packages-server
    
    # 上传Packages的软件列表
    - name: 上传Packages的软件列表
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success'
      with:
        name: ${{ steps.date.outputs.date }}_${{ env.DEVICE }}.manifest
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}.manifest
   
    # 上传RootFS 
    - name: 上传RootFS
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_ROOTFS == 'true'
      with:
        name: ${{ steps.date.outputs.date }}_${{ env.DEVICE }}-rootfs.tar.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-rootfs.tar.gz
     
    # 上传kernel镜像文件   
    - name: 上传initramfs镜像文件
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success'
      with:
        name: ${{ steps.date.outputs.date }}_${{ env.DEVICE }}-initramfs-kernel.bin
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-initramfs-kernel.bin
        
    # 上传factory镜像文件   
    - name: 上传factory镜像文件
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success'
      with:
        name: ${{ steps.date.outputs.date }}_${{ env.DEVICE }}-squashfs-factory.bin
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-factory.bin        
    
    # 上传Sysupgrade镜像文件   
    - name: 上传Sysupgrade镜像文件
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success'
      with:
        name: ${{ steps.date.outputs.date }}_${{ env.DEVICE }}-squashfs-sysupgrade.bin
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-sysupgrade.bin
   
    # 上传镜像Sha256sums
    - name: 上传镜像Sha256sums
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success'
      with:
        name: ${{ steps.date.outputs.date }}_${{ env.DEVICE }}.sha256sums
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/sha256sums
    
    # 上传文件到Tmp.Link 
    - name: 上传文件到Tmp.Link 
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_TMP_LINK == 'true'
      run: |
        cd openwrt/bin/targets/$TARGET/$SUBTARGET/
        find . -maxdepth 1 ! -name "$DOWNLOAD_URL_FILE" -type f -exec echo {} >> $DOWNLOAD_URL_FILE \; -exec curl -k -F "file=@{}" -F "token=${{ secrets.TMP_LINK_TOKEN }}" -F "model=0" -X POST "https://connect.tmp.link/api_v2/cli_uploader" -s >> $DOWNLOAD_URL_FILE \;
        sed -i 's/\.\///g' $DOWNLOAD_URL_FILE
        sed -i '/^Upload.*/d' $DOWNLOAD_URL_FILE
        sed -i '/^Thank.*/d' $DOWNLOAD_URL_FILE
        sed -i '/Download/G' $DOWNLOAD_URL_FILE
    
    # 上传Tmp.Link文件
    - name: 上传Tmp.Link文件
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_TMP_LINK == 'true'
      with:
        name: ${{ env.DOWNLOAD_URL_FILE }}
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DOWNLOAD_URL_FILE }}
